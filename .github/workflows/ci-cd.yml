name: CI/CD Pipeline

on:
  pull_request:
    branches: [ dev, main ]
  push:
    branches: [ dev, main ]

env:
  PYTHON_VERSION: '3.11'

jobs:

  #########################
  ## BUILD & TEST (ALL)  ##
  #########################
  build-and-test:
    runs-on: ubuntu-latest
    outputs:
      models_changed: ${{ steps.check_changes.outputs.models_changed }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m venv venv
          source venv/bin/activate
          pip install --upgrade pip setuptools
          pip install -r requirements.txt
          pip install pytest

      - name: Log installed versions (debug)
        run: |
          python --version
          pip freeze

      - name: Prepare MLflow directory
        run: mkdir -p mlruns

      - name: Run full pipeline (DEV branch)
        if: github.ref == 'refs/heads/dev'
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          source venv/bin/activate
          make pipeline-dev

      - name: Run full pipeline (MAIN branch)
        if: github.ref == 'refs/heads/main'
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          source venv/bin/activate
          make pipeline-prod

      - name: Run unit tests
        run: |
          source venv/bin/activate
          pytest tests/

      - name: Upload MLflow model artifacts
        uses: actions/upload-artifact@v4
        with:
          name: trained-model
          path: mlruns/**/artifacts/model/

      - name: Detect changes in models/ directory
        id: check_changes
        uses: dorny/paths-filter@v2
        with:
          filters: |
            models:
              - 'models/**'
              - 'configs/**'
              - 'data_processing/**'

  #################################
  ## DOCKER BUILD (ONLY MAIN)    ##
  #################################
  docker-build-and-push:
    needs: build-and-test
    if: github.ref == 'refs/heads/main' && success()
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Build Docker image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/ai-mlops-project:latest .

      - name: Push Docker image to registry
        run: |
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login --username "${{ secrets.DOCKER_USERNAME }}" --password-stdin
          docker push ${{ secrets.DOCKER_USERNAME }}/ai-mlops-project:latest

  ########################################
  ## MODEL SMOKE TEST (ONLY IF MODELS CHANGED)
  ########################################
  model-smoke-test:
    needs: build-and-test
    if: needs.build-and-test.outputs.models_changed == 'true'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install MLflow
        run: pip install mlflow pandas

      - name: Download model artifact
        uses: actions/download-artifact@v4
        with:
          name: trained-model
          path: mlruns

      - name: Serve model locally (smoke test)
        run: |
          nohup mlflow models serve -m mlruns/**/model --no-conda --port 1234 &
          sleep 10

      - name: Inference smoke test
        run: |
          curl -X POST http://127.0.0.1:1234/invocations \
            -H 'Content-Type: application/json' \
            -d '{"dataframe_records":[{"value":42.0,"hour":12.0,"day_of_week":3.0,"month":6.0}]}' || true

      - name: âœ… Model smoke test complete
        run: echo "Smoke test finished successfully"



